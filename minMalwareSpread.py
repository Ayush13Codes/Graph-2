class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # T: O(n ** 2), S: O(n)
        def dfs(node, component_id):
            visited[node] = component_id
            size[component_id] += 1
            for neighbor in range(n):
                if graph[node][neighbor] == 1 and visited[neighbor] == -1:
                    dfs(neighbor, component_id)

        n = len(graph)
        visited = [-1] * n
        size = defaultdict(int)
        malware_count = defaultdict(int)

        # Step 1: Find connected components
        component_id = 0
        for node in range(n):
            if visited[node] == -1:
                dfs(node, component_id)
                component_id += 1

        # Step 2: Count infected nodes in each component
        for node in initial:
            malware_count[visited[node]] += 1

        # Step 3: Find the best node to remove
        best_node = min(initial)  # Default: smallest index
        max_saved = 0

        for node in initial:
            comp = visited[node]
            if (
                malware_count[comp] == 1
            ):  # Removing this node saves the entire component
                if size[comp] > max_saved or (
                    size[comp] == max_saved and node < best_node
                ):
                    max_saved = size[comp]
                    best_node = node

        return best_node
